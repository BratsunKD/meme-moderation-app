version: '3.9'
services:
  web:
    restart: on-failure
    build:
      context: services/web/
      dockerfile: Dockerfile
    container_name: "web"
    ports:
      - "8000:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: $KAFKA_BOOTSTRAP_SERVERS
      TEXT_TOPIC: $TEXT_TOPIC
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

  moderator:
    restart: on-failure
    build:
      context: services/moderator/
      dockerfile: Dockerfile
    container_name: "moderator"
    ports:
      - "3000:3000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: $KAFKA_BOOTSTRAP_SERVERS
      TEXT_TOPIC: $TEXT_TOPIC
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 3000

  prediction-worker:
    restart: on-failure
    build:
      context: services/prediction-worker/
      dockerfile: Dockerfile
    container_name: "prediction-worker"
    ports:
      - "7000:7000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: $KAFKA_BOOTSTRAP_SERVERS
      PREDICTION_TOPIC: $PREDICTION_TOPIC
    depends_on:
      kafka:
        condition: service_healthy

  prediction:
    restart: on-failure
    build:
      context: services/toxic-detector/
      dockerfile: Dockerfile
    container_name: "toxic-detector"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: $KAFKA_BOOTSTRAP_SERVERS
      TEXT_TOPIC: $TEXT_TOPIC
      PREDICTION_TOPIC: $PREDICTION_TOPIC
    depends_on:
      kafka:
        condition: service_healthy

  zookeeper:
    image: 'bitnami/zookeeper:3.7.0'
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=$ALLOW_ANONYMOUS_LOGIN

  kafka:
    image: 'bitnami/kafka:2.8.0'
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=$KAFKA_ZOOKEEPER_CONNECT
      - ALLOW_PLAINTEXT_LISTENER=$ALLOW_PLAINTEXT_LISTENER
    depends_on:
      - zookeeper
    healthcheck:
      test: kafka-cluster.sh cluster-id --bootstrap-server localhost:9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60

  redis: # Добавляем сервис Redis
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
